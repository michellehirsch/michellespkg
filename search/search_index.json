{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Project Docs","text":"<p>This is the main documentation for michellespkg.</p> <p>Navigate through the sections to learn more about installation, usage, and the API.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p><code>michellespkg</code> is a simple Python library for computing the area and visualizing common two-dimensional shapes.</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#project","title":"Project","text":"<p>michellespkg</p> <p>This project is [Please fill in a brief description of your package's purpose here.]</p>"},{"location":"about/#author","title":"Author","text":"<p>Michelle Hirsch (and any other contributors)</p>"},{"location":"about/#license","title":"License","text":"<p>This project is licensed under the MIT License. You can find the full license text in the <code>LICENSE</code> file in the root of the project repository.</p>"},{"location":"about/#source-code","title":"Source Code","text":"<p>The source code for <code>michellespkg</code> is available on GitHub.</p>"},{"location":"api/","title":"API Reference","text":"<p>This section provides detailed information about the public API of the <code>michellespkg</code> package, generated directly from the source code docstrings.</p> <p>Make sure your package is installed (e.g., <code>pip install -e .</code> in your project root) for <code>mkdocstrings</code> to be able to find and parse your modules.</p>"},{"location":"api/#shapes-module","title":"<code>shapes</code> Module","text":"<p>The <code>michellespkg.shapes</code> module contains classes for representing various geometric shapes.</p>"},{"location":"api/#michellespkg.shapes","title":"<code>michellespkg.shapes</code>","text":"<p>A collection of functions to calculate the area of common 2D shapes.</p>"},{"location":"api/#michellespkg.shapes.area_rectangle","title":"<code>area_rectangle(length, width)</code>","text":"<p>Calculates the area of a rectangle.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>float</code> <p>The length of the rectangle.</p> required <code>width</code> <code>float</code> <p>The width of the rectangle.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The area of the rectangle.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If length or width is negative.</p> Source code in <code>src/michellespkg/shapes.py</code> <pre><code>def area_rectangle(length: float, width: float) -&gt; float:\n    \"\"\"\n    Calculates the area of a rectangle.\n\n    Args:\n        length: The length of the rectangle.\n        width: The width of the rectangle.\n\n    Returns:\n        The area of the rectangle.\n\n    Raises:\n        ValueError: If length or width is negative.\n    \"\"\"\n    if length &lt; 0 or width &lt; 0:\n        raise ValueError(\"Length and width must be non-negative.\")\n    return length * width\n</code></pre>"},{"location":"api/#michellespkg.shapes.area_circle","title":"<code>area_circle(radius)</code>","text":"<p>Calculates the area of a circle.</p> <p>Parameters:</p> Name Type Description Default <code>radius</code> <code>float</code> <p>The radius of the circle.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The area of the circle.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If radius is negative.</p> Source code in <code>src/michellespkg/shapes.py</code> <pre><code>def area_circle(radius: float) -&gt; float:\n    \"\"\"\n    Calculates the area of a circle.\n\n    Args:\n        radius: The radius of the circle.\n\n    Returns:\n        The area of the circle.\n\n    Raises:\n        ValueError: If radius is negative.\n    \"\"\"\n    if radius &lt; 0:\n        raise ValueError(\"Radius must be non-negative.\")\n    return math.pi * radius**2\n</code></pre>"},{"location":"api/#michellespkg.shapes.area_triangle","title":"<code>area_triangle(base, height)</code>","text":"<p>Calculates the area of a triangle.</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>float</code> <p>The base length of the triangle.</p> required <code>height</code> <code>float</code> <p>The perpendicular height of the triangle.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The area of the triangle.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If base or height is negative.</p> Source code in <code>src/michellespkg/shapes.py</code> <pre><code>def area_triangle(base: float, height: float) -&gt; float:\n    \"\"\"\n    Calculates the area of a triangle.\n\n    Args:\n        base: The base length of the triangle.\n        height: The perpendicular height of the triangle.\n\n    Returns:\n        The area of the triangle.\n\n    Raises:\n        ValueError: If base or height is negative.\n    \"\"\"\n    if base &lt; 0 or height &lt; 0:\n        raise ValueError(\"Base and height must be non-negative.\")\n    return 0.5 * base * height\n</code></pre>"},{"location":"api/#michellespkg.shapes.plot_rectangle","title":"<code>plot_rectangle(length, width, origin=(0, 0))</code>","text":"<p>Visualizes a rectangle with its dimensions.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>float</code> <p>The length of the rectangle.</p> required <code>width</code> <code>float</code> <p>The width of the rectangle.</p> required <code>origin</code> <code>tuple[float, float]</code> <p>The (x, y) coordinates of the bottom-left corner. Defaults to (0,0).</p> <code>(0, 0)</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If length or width is not positive.</p> Source code in <code>src/michellespkg/shapes.py</code> <pre><code>def plot_rectangle(length: float, width: float, origin: tuple[float, float] = (0, 0)):\n    \"\"\"\n    Visualizes a rectangle with its dimensions.\n\n    Args:\n        length: The length of the rectangle.\n        width: The width of the rectangle.\n        origin: The (x, y) coordinates of the bottom-left corner. Defaults to (0,0).\n\n    Raises:\n        ValueError: If length or width is not positive.\n    \"\"\"\n    if length &lt;= 0 or width &lt;= 0:\n        raise ValueError(\"Length and width must be positive for visualization.\")\n\n    fig, ax = plt.subplots(1)\n    ax.set_aspect(\"equal\", adjustable=\"box\")\n\n    rect_patch = patches.Rectangle(\n        origin,\n        length,\n        width,\n        linewidth=1,\n        edgecolor=\"r\",\n        facecolor=\"lightcoral\",\n        alpha=0.6,\n    )\n    ax.add_patch(rect_patch)\n\n    # Add dimension labels\n    center_x = origin[0] + length / 2\n    ax.text(\n        center_x,\n        origin[1] - 0.05 * width,\n        f\"Length: {length}\",\n        ha=\"center\",\n        va=\"top\",\n        fontsize=9,\n    )\n    center_y = origin[1] + width / 2\n    ax.text(\n        origin[0] - 0.05 * length,\n        center_y,\n        f\"Width: {width}\",\n        ha=\"right\",\n        va=\"center\",\n        rotation=\"vertical\",\n        fontsize=9,\n    )\n\n    # Set plot limits with padding\n    padding_x = length * 0.25\n    padding_y = width * 0.25\n    ax.set_xlim(origin[0] - padding_x, origin[0] + length + padding_x)\n    ax.set_ylim(origin[1] - padding_y, origin[1] + width + padding_y)\n\n    plt.xlabel(\"X-coordinate\")\n    plt.ylabel(\"Y-coordinate\")\n    plt.title(f\"Rectangle (L={length}, W={width})\")\n    plt.grid(True)\n    plt.show()\n</code></pre>"},{"location":"api/#michellespkg.shapes.plot_circle","title":"<code>plot_circle(radius, center=(0, 0))</code>","text":"<p>Visualizes a circle with its dimensions.</p> <p>Parameters:</p> Name Type Description Default <code>radius</code> <code>float</code> <p>The radius of the circle.</p> required <code>center</code> <code>tuple[float, float]</code> <p>The (x, y) coordinates of the circle's center. Defaults to (0,0).</p> <code>(0, 0)</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If radius is not positive.</p> Source code in <code>src/michellespkg/shapes.py</code> <pre><code>def plot_circle(radius: float, center: tuple[float, float] = (0, 0)):\n    \"\"\"\n    Visualizes a circle with its dimensions.\n\n    Args:\n        radius: The radius of the circle.\n        center: The (x, y) coordinates of the circle's center. Defaults to (0,0).\n\n    Raises:\n        ValueError: If radius is not positive.\n    \"\"\"\n    if radius &lt;= 0:\n        raise ValueError(\"Radius must be positive for visualization.\")\n\n    fig, ax = plt.subplots(1)\n    ax.set_aspect(\"equal\", adjustable=\"box\")\n\n    circle_patch = patches.Circle(\n        center, radius, linewidth=1, edgecolor=\"b\", facecolor=\"lightblue\", alpha=0.6\n    )\n    ax.add_patch(circle_patch)\n\n    # Add dimension label (radius line and text)\n    ax.plot(\n        [center[0], center[0] + radius * math.cos(math.pi / 4)],\n        [center[1], center[1] + radius * math.sin(math.pi / 4)],\n        \"k--\",\n    )\n    ax.text(\n        center[0] + radius * 0.5 * math.cos(math.pi / 4),\n        center[1] + radius * 0.5 * math.sin(math.pi / 4) + radius * 0.05,\n        f\"Radius: {radius}\",\n        ha=\"center\",\n        va=\"bottom\",\n        fontsize=9,\n    )\n\n    # Set plot limits with padding\n    padding = radius * 0.25\n    ax.set_xlim(center[0] - radius - padding, center[0] + radius + padding)\n    ax.set_ylim(center[1] - radius - padding, center[1] + radius + padding)\n\n    plt.xlabel(\"X-coordinate\")\n    plt.ylabel(\"Y-coordinate\")\n    plt.title(f\"Circle (R={radius})\")\n    plt.grid(True)\n    plt.show()\n</code></pre>"},{"location":"api/#michellespkg.shapes.plot_triangle","title":"<code>plot_triangle(base, height, origin=(0, 0))</code>","text":"<p>Visualizes a right-angled triangle with its dimensions. The origin is the vertex of the right angle. The base extends along the positive x-axis from the origin. The height extends along the positive y-axis from the origin.</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>float</code> <p>The base length of the triangle.</p> required <code>height</code> <code>float</code> <p>The perpendicular height of the triangle.</p> required <code>origin</code> <code>tuple[float, float]</code> <p>The (x, y) coordinates of the right-angle vertex. Defaults to (0,0).</p> <code>(0, 0)</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If base or height is not positive.</p> Source code in <code>src/michellespkg/shapes.py</code> <pre><code>def plot_triangle(base: float, height: float, origin: tuple[float, float] = (0, 0)):\n    \"\"\"\n    Visualizes a right-angled triangle with its dimensions.\n    The origin is the vertex of the right angle.\n    The base extends along the positive x-axis from the origin.\n    The height extends along the positive y-axis from the origin.\n\n    Args:\n        base: The base length of the triangle.\n        height: The perpendicular height of the triangle.\n        origin: The (x, y) coordinates of the right-angle vertex. Defaults to (0,0).\n\n    Raises:\n        ValueError: If base or height is not positive.\n    \"\"\"\n    if base &lt;= 0 or height &lt;= 0:\n        raise ValueError(\"Base and height must be positive for visualization.\")\n\n    fig, ax = plt.subplots(1)\n    ax.set_aspect(\"equal\", adjustable=\"box\")\n\n    v0 = origin\n    v1 = (origin[0] + base, origin[1])\n    v2 = (origin[0], origin[1] + height)\n    triangle_patch = patches.Polygon(\n        [v0, v1, v2], linewidth=1, edgecolor=\"g\", facecolor=\"lightgreen\", alpha=0.6\n    )\n    ax.add_patch(triangle_patch)\n\n    # Add dimension labels\n    ax.text(\n        origin[0] + base / 2,\n        origin[1] - 0.05 * height,\n        f\"Base: {base}\",\n        ha=\"center\",\n        va=\"top\",\n        fontsize=9,\n    )\n    ax.text(\n        origin[0] - 0.05 * base,\n        origin[1] + height / 2,\n        f\"Height: {height}\",\n        ha=\"right\",\n        va=\"center\",\n        rotation=\"vertical\",\n        fontsize=9,\n    )\n\n    # Set plot limits with padding\n    padding_x = base * 0.25\n    padding_y = height * 0.25\n    ax.set_xlim(origin[0] - padding_x, origin[0] + base + padding_x)\n    ax.set_ylim(origin[1] - padding_y, origin[1] + height + padding_y)\n\n    plt.xlabel(\"X-coordinate\")\n    plt.ylabel(\"Y-coordinate\")\n    plt.title(f\"Right-Angled Triangle (B={base}, H={height})\")\n    plt.grid(True)\n    plt.show()\n</code></pre>"},{"location":"api/#individual-shape-classes","title":"Individual Shape Classes","text":"<p>While the above block documents the entire <code>shapes</code> module (including all its public classes and functions), you can also document individual classes if you want to add more descriptive text around them or control their placement.</p>"},{"location":"user-guide/getting-started/","title":"Getting Started","text":"<p>This guide will help you get started with the basic usage of <code>michellespkg</code>.</p>"},{"location":"user-guide/getting-started/#importing-the-package","title":"Importing the Package","text":"<p>Once <code>michellespkg</code> is installed, you can import it and its components into your Python scripts or interactive sessions.</p> <pre><code># Example:\nfrom michellespkg.shapes import Circle, Rectangle\n\ncircle = Circle(radius=5)\nprint(f\"Circle Area: {circle.area()}\")\n\nrectangle = Rectangle(width=4, height=6)\nprint(f\"Rectangle Area: {rectangle.area()}\")\n</code></pre>"},{"location":"user-guide/getting-started/#basic-example","title":"Basic Example","text":"<p>Below is a simple example demonstrating how to use a core feature of <code>michellespkg</code>.</p> <pre><code>import michellespkg\n\n# Calculate area of a rectangle\nrect_area = michellespkg.area_rectangle(10, 5)\nprint(f\"Area of rectangle: {rect_area} \")\n\n# Calculate area of a circle\ncirc_area = michellespkg.area_circle(7)\nprint(f\"Area of circle: {circ_area}\")\n\n# Calculate area of a triangle\ntri_area = michellespkg.area_triangle(8, 4)\nprint(f\"Area of triangle: {tri_area}\")\n\n# Visualize a rectangle\nmichellespkg.plot_rectangle(length=10, width=5)\n\n# Visualize a circle\nmichellespkg.plot_circle(radius=7, center=(2, 2))\n\n# Visualize a right-angled triangle\nmichellespkg.plot_triangle(base=8, height=4, origin=(1, 1))\n</code></pre> <p>Refer to the API Reference for more detailed information on available modules and functions.</p>"},{"location":"user-guide/installation/","title":"Installation","text":"<p>This page guides you through installing <code>michellespkg</code>.</p>"},{"location":"user-guide/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher.</li> </ul>"},{"location":"user-guide/installation/#installing-with-pip","title":"Installing with pip","text":"<p>You can install <code>michellespkg</code> directly from PyPI (once published) using pip:</p> <pre><code>pip install michellespkg\n</code></pre> <p>If you have specific optional dependencies (e.g., for development or extra features), you might install them like so (assuming they are defined in your <code>pyproject.toml</code>): <pre><code>pip install michellespkg[dev]\n</code></pre></p>"},{"location":"user-guide/installation/#installing-from-source","title":"Installing from Source","text":"<p>To install <code>michellespkg</code> from its source code:</p> <ol> <li>Clone the repository:     <pre><code>git clone https://github.com/michellehirsch/michellespkg.git\ncd michellespkg\n</code></pre></li> <li>Install using pip (use <code>-e</code> for an editable/development install):     <pre><code>pip install -e .\n</code></pre></li> </ol>"}]}